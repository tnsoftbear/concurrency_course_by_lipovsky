#include <exe/executors/strand.hpp>

#include <mutex>
#include <twist/ed/wait/spin.hpp>
#include <twist/ed/local/var.hpp>
#include <map>

/**
 * Алгоритм этого решения скопирован из await fw.
 * https://gitlab.com/Lipovsky/await/-/blob/master/await/tasks/exe/strand.cpp?ref_type=heads
 * Но он не помогает решить проблему, с которой я столкнулся в других решениях,
 * которая проявляется в тесте: clippy target strand_lifetime_tests FaultyFibersASan
 * После завершения задачи, объект странда удаляется из памяти, потому что был сделан automation.reset() 
 * См. /workspace/concurrency-course/tasks/tasks/executors/tests/executors/strand/lifetime.cpp
 * А т.к. this удалён, мы больше не можем обращаться к свойствам объекта и принимать по ним решения.
 * В данном случае речь идёт от свойстве counter_, по которой мы решаем продолжать ли обслуживать очередь ожидания задач или нет.
 * Поэтому я вынес этот счётчик в статическую память в мапу. 
 * Кроме того, приходится использовать std::atomic вместо twsit/atomic, 
 * потому что я не знаю, как их инициализировать, когда они в мапе, чтобы это работало для FaultyFibers.
 */

namespace exe::executors {

//const bool kShouldPrint = true;
 const bool kShouldPrint = false;

static std::map<size_t, std::atomic<size_t>> counters;
static atomic<size_t> max_id{0};

Strand::Strand(IExecutor& underlying)
  : underlying_(underlying) 
  , id_(max_id.fetch_add(1)) {
    counters[id_].store(0);
  }

Strand::~Strand() {
  counters.erase(id_);
}

void Strand::Submit(Task task) {
  tasks_.Put(std::move(task));
  if (counters[id_].fetch_add(1) == 0) {
    SubmitSelf();
  }
}

void Strand::SubmitSelf() {
  auto decorated = [this]() mutable  {
    Run();
  };
  underlying_.Submit(std::move(decorated));
}

void Strand::Run() {
  exe::support::UnboundedBlockingQueue<Task> processing_tasks;
  lock_.Lock();
  while (!tasks_.IsEmpty()) {
    processing_tasks.Put(tasks_.Take().value());
  }
  lock_.Unlock();

  if (processing_tasks.IsEmpty()) {
    return;
  }

  size_t id = id_;
  const size_t done = RunTasks(processing_tasks);
  const size_t left = counters[id].fetch_sub(done);
  if (left > done) {
    SubmitSelf();
  }
}

size_t Strand::RunTasks(exe::support::UnboundedBlockingQueue<Task>& processing_tasks) {
  size_t count = 0;
  while (!processing_tasks.IsEmpty()) {
    processing_tasks.Take().value()();
    ++count;
  }
  return count;
}

void Strand::Ll(const char* format, ...) {
  if (!kShouldPrint) {
    return;
  }

  char buf [250];
  std::ostringstream pid;
  pid << "[" << twist::ed::stdlike::this_thread::get_id() << "]";
  //sprintf(buf, "%s Strand::%s, qc: %lu\n", pid.str().c_str(), format, tasks_.Count());
  sprintf(buf, "%s Strand::%s\n", pid.str().c_str(), format);
  va_list args;
  va_start(args, format);
  vprintf(buf, args);
  va_end(args);
}

}  // namespace exe::executors
